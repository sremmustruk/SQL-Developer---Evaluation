
/*..................................................................................................


Subject: Emerson SQL Coding Exercise 
Date: 4/22/2020

Solution coded by AKS
Location: Atlanta, GA 


Recruiter / Referral: Paul M.

....................................................................................................




							README


Solution
________

The simple solution is to pass JSON data to the SetPlayer stored 
procedure.  This will allow for updating multiple teams for a player 
in one pass.

The sample data provided is included in my solution.  Code 
accomodatesany number of teams as long as the team exists in the 
Team table.





Assumptions
___________

SetPlayer-

As stated in the requirements, it is OK to have caller always pass 
in a complete team list and replace current team list for player. 
Therefore, Passing in a single team will be treated like a list.

Leaders on a team are also Players.


GetPlayer-

Assuming that "all arguments" is any field in the Player table, 
including ID.  Assuming this procedure will return a list of players
based on the search criteria.  Requirements do not say what needs to
be returned.



Testing
_______

JSON test data is included at the end of this script with successful
output.

JSON input and output format was not in requirements.  Ad hoc at
developer's discretion.  User to modify in order to accommodate their 
expected results.

REMINDER:  DO NOT RUN this script again unless you want to start over.  
Proceed with tests as needed.


*/

use tempdb -- need to modify to be YOUR database for development or testing.
GO 

drop table if exists Player
GO 

drop table if exists Team
GO 

drop sequence if exists playerId
GO 

CREATE SEQUENCE [dbo].playerId START WITH 1 INCREMENT BY 1 -- sequence for Player ID.
GO 
 

CREATE TABLE [dbo].[Player] -- create Player table.
	( 
		[ID] [int] NOT NULL DEFAULT (NEXT VALUE FOR [dbo].playerID), 
		[LastName] [nvarchar](50) NOT NULL, 
		[FirstName] [nvarchar](50) NOT NULL, 
		[DOB] [date] NOT NULL, 
		[Teams] [nvarchar](1000) NULL, 

	PRIMARY KEY CLUSTERED ([ID] ASC) 
		WITH 
		 (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) 
		ON [PRIMARY]
	)	
	ON [PRIMARY] 

GO 


CREATE TABLE [dbo].[Team] -- create Team table.
	(
		[TeamName] [nvarchar](50) NOT NULL, 
		[TeamLeaderID] [int] NOT NULL, 
    )

GO 

ALTER TABLE dbo.[Team] ADD CONSTRAINT PK_TEAM PRIMARY KEY([TeamName], [TeamLeaderID]) 
ALTER TABLE dbo.[Team] ADD CONSTRAINT UNIQUE_Name UNIQUE([TeamName]) 




/*.......................................BEGIN SAMPLE DATA..........................................*/

insert into Player (ID, LastName, FirstName, DOB, Teams) values (100, 'Smith', 'Sally', '04/18/1995', 'Red')
GO 
insert into Player (ID, LastName, FirstName, DOB, Teams) values (101, 'Jones', 'James', '05/22/1996', 'Blue, Red')
GO
insert into Player (ID, LastName, FirstName, DOB, Teams) values (102, 'Brown', 'Bobby', '11/18/1995', 'Green, Blue')
GO
insert into Player (ID, LastName, FirstName, DOB, Teams) values (103, 'Jones', 'Janet', '08/22/1998', 'Blue, Green, Red')
GO
insert into Player (ID, LastName, FirstName, DOB, Teams) values (104, 'Magoo', 'Matthew', '12/20/1994', 'Green') 
GO
insert into Player (ID, LastName, FirstName, DOB, Teams) values (105, 'Wayfield', 'Wanda', '05/05/1995', 'Red') 
GO
insert into Team values ('Red', 0)  
GO
insert into Team values ('Blue', 0)
GO
insert into Team values ('Green', 0) 
GO
/*........................................END SAMPLE DATA...........................................*/




SET 
ANSI_NULLS ON 
GO 
SET 
QUOTED_IDENTIFIER ON 
GO

/*#############################################################################*/
/*#*********		Object:  StoredProcedure [dbo].[SetPlayer]      ******#*/
/*#*********		Script Date: 4/21/2020 9:56:25 AM               ******#*/
/*#*********		                                                ******#*/
/*#*********		Input JSON; Output JSON; Return Code            ******#*/
/*#*********		(NOTE: See example in script footer.)           ******#*/
/*#############################################################################*/

CREATE OR ALTER PROCEDURE [dbo].[SetPlayer] (@PlayerJSON NVARCHAR(4000) OUTPUT)
AS
BEGIN
	DECLARE @PlayerJSONTemp NVARCHAR(4000)

	SET @PlayerJSONTemp = ''

	DECLARE @PlayerID INT

	SELECT --read JSON elements into TEMP table.
		@PlayerID = NEXT VALUE
	FOR DBO.playerId

	CREATE TABLE #tempPlayerTable (
		[LastName] [nvarchar](50) NOT NULL
		,[FirstName] [nvarchar](50) NOT NULL
		,[DOB] [date] NOT NULL
		,[Team] [nvarchar](50) NULL
		,
		)

	INSERT INTO #tempPlayerTable --insert into table by team
	SELECT json_value(@PlayerJSON, '$.info.LastName') AS LastName
		,json_value(@PlayerJSON, '$.info.FirstName') AS Firstname
		,json_value(@PlayerJSON, '$.info.DOB') AS DOB
		,value AS Team
	FROM OPENJSON(@PlayerJSON, '$.info.Teams')

	DECLARE @Teams NVARCHAR(50)

	SELECT --select teams into a comma delimited variable.
		@Teams = COALESCE(@Teams + ',', '') + CAST(Team AS NVARCHAR(50))
	FROM #tempPlayerTable a
	INNER JOIN Team b ON a.Team = b.TeamName

	/*##########################    1.) if ID is NULL, create new player.    ###########################*/
	IF (LEN(ISNULL(rtrim(ltrim(json_value(@PlayerJSON, '$.info.ID'))), '')) = 0)
	BEGIN
		IF (
				(LEN(ISNULL(rtrim(ltrim(json_value(@PlayerJSON, '$.info.LastName'))), '')) = 0)
				OR (LEN(ISNULL(rtrim(ltrim(json_value(@PlayerJSON, '$.info.FirstName'))), '')) = 0)
				OR (LEN(ISNULL(rtrim(ltrim(json_value(@PlayerJSON, '$.info.DOB'))), '')) = 0)
				)
		BEGIN
			SET @PlayerJSON = N'"{"output": "err":"LastName, FirstName, DOB required" }' --required field missing error

			RETURN 1 --return error code
		END

		INSERT INTO Player (
			--insert NEW player
			ID
			,LastName
			,FirstName
			,DOB
			,Teams
			)
		SELECT @PlayerID
			,json_value(@PlayerJSON, '$.info.LastName') AS LastName
			,json_value(@PlayerJSON, '$.info.FirstName') AS Firstname
			,json_value(@PlayerJSON, '$.info.DOB') AS DOB
			,@Teams 
			Set @PlayerJSON = N'"{"output": "PlayerID":' + convert(nvarchar,@PlayerID) + ' }'  --return NEW player ID
			

		RETURN 0 -- return success
	END

	/*##########################    2.) if ID is not NULL and player EXISTS, create new player.    ###########################*/
	IF (LEN(ISNULL(rtrim(ltrim(json_value(@PlayerJSON, '$.info.ID'))), '')) > 0)
	BEGIN
		DECLARE @PlayerExists INT = 0

		SELECT @PlayerExists = count(*)
		FROM Player
		WHERE ID = convert(NVARCHAR, rtrim(ltrim(json_value(@PlayerJSON, '$.info.ID'))))

		SELECT @PlayerExists

		IF @PlayerExists > 0
		BEGIN
			--check each required field and update
			--lastName
			IF LEN(ISNULL(rtrim(ltrim(json_value(@PlayerJSON, '$.info.LastName'))), '')) > 0
			BEGIN
				UPDATE player
				SET LastName = rtrim(ltrim(json_value(@PlayerJSON, '$.info.LastName')))
				WHERE id = convert(NVARCHAR, rtrim(ltrim(json_value(@PlayerJSON, '$.info.ID'))))
			END

			--firstName
			IF LEN(ISNULL(rtrim(ltrim(json_value(@PlayerJSON, '$.info.FirstName'))), '')) > 0
			BEGIN
				UPDATE player
				SET FirstName = rtrim(ltrim(json_value(@PlayerJSON, '$.info.FirstName')))
				WHERE id = convert(NVARCHAR, rtrim(ltrim(json_value(@PlayerJSON, '$.info.ID'))))
			END

			--DOB
			IF LEN(ISNULL(rtrim(ltrim(json_value(@PlayerJSON, '$.info.DOB'))), '')) > 0
			BEGIN
				UPDATE player
				SET DOB = rtrim(ltrim(json_value(@PlayerJSON, '$.info.DOB')))
				WHERE id = convert(NVARCHAR, rtrim(ltrim(json_value(@PlayerJSON, '$.info.ID'))))
			END

			--teams
			UPDATE player
			SET Teams = @Teams
			WHERE id = convert(NVARCHAR, convert(NVARCHAR, rtrim(ltrim(json_value(@PlayerJSON, '$.info.ID')))))

			--return JSON success messsage
			SET @PlayerJSON = N'"{"output": "PlayerID ' + convert(NVARCHAR, convert(NVARCHAR, rtrim(ltrim(json_value(@PlayerJSON, '$.info.ID'))))) + ' updated." }'

			RETURN 0 --return success code
		END
	END

	/*##########################    3.) if ID is not NULL and player does not EXIST, return error.    ###########################*/
	IF @PlayerExists = 0
		--return JSON failure message
		SET @PlayerJSON = N'"{"output": "PlayerID ' + convert(NVARCHAR, convert(NVARCHAR, rtrim(ltrim(json_value(@PlayerJSON, '$.info.ID'))))) + ' DOES NOT EXIST." }'

	RETURN 1 --return failure code
END
GO 





SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*############################################################################*/
/*#*********		Object:  StoredProcedure [dbo].[GetPlayer]      *****#*/
/*#*********		Script Date: 4/21/2020 9:56:25 AM               *****#*/
/*#*********		                                                *****#*/
/*#*********		Input JSON; Output JSON; Return Code            *****#*/
/*#*********		(NOTE: See example in script footer.)           *****#*/
/*############################################################################*/

CREATE OR ALTER PROCEDURE [dbo].[GetPlayer] (@PlayerJSON NVARCHAR(4000) OUTPUT)
AS
BEGIN
	DECLARE @Names NVARCHAR(50)


	BEGIN TRY  
		SELECT @Names = COALESCE(@Names + ',', '') + p.FirstName + ', ' + p.LastName
	FROM player p
	WHERE (
			(ISNULL(rtrim(ltrim(json_value(@PlayerJSON, '$.info.ID'))), '') = '')
			OR (rtrim(ltrim(json_value(@PlayerJSON, '$.info.ID'))) = p.ID)
			)
		AND (
			(ISNULL(rtrim(ltrim(json_value(@PlayerJSON, '$.info.LastName'))), '') = '')
			OR (rtrim(ltrim(json_value(@PlayerJSON, '$.info.LastName'))) = p.LastName)
			)
		AND (
			(ISNULL(rtrim(ltrim(json_value(@PlayerJSON, '$.info.FirstName'))), '') = '')
			OR (rtrim(ltrim(json_value(@PlayerJSON, '$.info.FirstName'))) = p.FirstName)
			)
		AND (
			(ISNULL(rtrim(ltrim(json_value(@PlayerJSON, '$.info.DOB'))), '') = '')
			OR (rtrim(ltrim(json_value(@PlayerJSON, '$.info.DOB'))) = p.DOB)
			)
		AND (
			(ISNULL(rtrim(ltrim(json_value(@PlayerJSON, '$.info.Teams'))), '') = '')
			OR (CHARINDEX(rtrim(ltrim(json_value(@PlayerJSON, '$.info.Teams'))), p.teams) > 0)
			)

	SELECT @PlayerJSON = @Names

	RETURN 0	 --return success
END TRY  
BEGIN CATCH  
Select ERROR_MESSAGE() AS ErrorMessage,  
	           ERROR_NUMBER() AS ErrorNumber

	   Select @PlayerJSON =   N'"{"output": "Error Number ' + convert(NVARCHAR, ERROR_NUMBER()) + ' Error Message ' + convert(NVARCHAR, ERROR_MESSAGE())+ ' " } '

	RETURN 1	 --return failure.
END CATCH  

	
END



/*


Stored procedure SetPlayer will accept ONE param as JSON in the following
format; Returns various response JSON to user, e.g. ID.; Returns 
return code of 0 or 1 (success or fail).

--THIS IS SAMPLE JSON TO BE PASSED TO SETPLAYER 
DECLARE @return_val int
DECLARE @PlayerJSON nvarchar(4000) =
N'{
	"info":{
	    "ID":"100",
		"LastName":"",
        "FirstName":"",
        "DOB":"",
       "Teams":["Red","Blue","Yellow"] } }'
EXEC @return_val = SetPlayer @PlayerJSON = @PlayerJSON OUTPUT
SELECT @PlayerJSON
Select @return_val



Store procedure GetPlayer will accept ONE param as JSON in the following
format (Teams is a single team); Returns various response JSON to user, 
e.g. ID.; Returns return code of 0 or 1 (success or fail).

--THIS IS SAMPLE JSON TO BE PASSED TO GETPLAYER 
DECLARE @return_val int
DECLARE @PlayerJSON nvarchar(4000) =  --or MAX
N'{
	"info":{
	    "ID":"100",
		"LastName":"",
        "FirstName":"",
        "DOB":"",
        "Teams":""} }'
EXEC @return_val = GetPlayer @PlayerJSON = @PlayerJSON OUTPUT
SELECT @PlayerJSON
Select @return_val


*/
